//
// Generated file, do not edit! Created by opp_msgtool 6.0 from ShufflerExecutionMessage.msg.
//

#ifndef __SHUFFLEREXECUTIONMESSAGE_M_H
#define __SHUFFLEREXECUTIONMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class ShufflerExecutionMessage;
/**
 * Class generated from <tt>ShufflerExecutionMessage.msg:17</tt> by opp_msgtool.
 * <pre>
 * message ShufflerExecutionMessage
 * {
 *     int reducersAvailable[];
 *     int partitionsElaborated[];
 * 
 * }
 * </pre>
 */
class ShufflerExecutionMessage : public ::omnetpp::cMessage
{
  protected:
    int *reducersAvailable = nullptr;
    size_t reducersAvailable_arraysize = 0;
    int *partitionsElaborated = nullptr;
    size_t partitionsElaborated_arraysize = 0;

  private:
    void copy(const ShufflerExecutionMessage& other);

  protected:
    bool operator==(const ShufflerExecutionMessage&) = delete;

  public:
    ShufflerExecutionMessage(const char *name=nullptr, short kind=0);
    ShufflerExecutionMessage(const ShufflerExecutionMessage& other);
    virtual ~ShufflerExecutionMessage();
    ShufflerExecutionMessage& operator=(const ShufflerExecutionMessage& other);
    virtual ShufflerExecutionMessage *dup() const override {return new ShufflerExecutionMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual void setReducersAvailableArraySize(size_t size);
    virtual size_t getReducersAvailableArraySize() const;
    virtual int getReducersAvailable(size_t k) const;
    virtual void setReducersAvailable(size_t k, int reducersAvailable);
    virtual void insertReducersAvailable(size_t k, int reducersAvailable);
    [[deprecated]] void insertReducersAvailable(int reducersAvailable) {appendReducersAvailable(reducersAvailable);}
    virtual void appendReducersAvailable(int reducersAvailable);
    virtual void eraseReducersAvailable(size_t k);

    virtual void setPartitionsElaboratedArraySize(size_t size);
    virtual size_t getPartitionsElaboratedArraySize() const;
    virtual int getPartitionsElaborated(size_t k) const;
    virtual void setPartitionsElaborated(size_t k, int partitionsElaborated);
    virtual void insertPartitionsElaborated(size_t k, int partitionsElaborated);
    [[deprecated]] void insertPartitionsElaborated(int partitionsElaborated) {appendPartitionsElaborated(partitionsElaborated);}
    virtual void appendPartitionsElaborated(int partitionsElaborated);
    virtual void erasePartitionsElaborated(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ShufflerExecutionMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ShufflerExecutionMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline ShufflerExecutionMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<ShufflerExecutionMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __SHUFFLEREXECUTIONMESSAGE_M_H

