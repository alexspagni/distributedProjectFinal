//
// Generated file, do not edit! Created by opp_msgtool 6.0 from keysValueMessage.msg.
//

#ifndef __KEYSVALUEMESSAGE_M_H
#define __KEYSVALUEMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class KeysValueMessage;
/**
 * Class generated from <tt>keysValueMessage.msg:16</tt> by opp_msgtool.
 * <pre>
 * //
 * // This program is free software: you can redistribute it and/or modify
 * // it under the terms of the GNU Lesser General Public License as published by
 * // the Free Software Foundation, either version 3 of the License, or
 * // (at your option) any later version.
 * // 
 * // This program is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * // GNU Lesser General Public License for more details.
 * // 
 * // You should have received a copy of the GNU Lesser General Public License
 * // along with this program.  If not, see http://www.gnu.org/licenses/.
 * //
 * message KeysValueMessage
 * {
 *     int reducerToSend;
 *     int key;
 *     int value[100];
 * }
 * </pre>
 */
class KeysValueMessage : public ::omnetpp::cMessage
{
  protected:
    int reducerToSend = 0;
    int key = 0;
    int value[100] = {0};

  private:
    void copy(const KeysValueMessage& other);

  protected:
    bool operator==(const KeysValueMessage&) = delete;

  public:
    KeysValueMessage(const char *name=nullptr, short kind=0);
    KeysValueMessage(const KeysValueMessage& other);
    virtual ~KeysValueMessage();
    KeysValueMessage& operator=(const KeysValueMessage& other);
    virtual KeysValueMessage *dup() const override {return new KeysValueMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getReducerToSend() const;
    virtual void setReducerToSend(int reducerToSend);

    virtual int getKey() const;
    virtual void setKey(int key);

    virtual size_t getValueArraySize() const;
    virtual int getValue(size_t k) const;
    virtual void setValue(size_t k, int value);
    virtual void setEntireArray(int *otherArray);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const KeysValueMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, KeysValueMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline KeysValueMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<KeysValueMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __KEYSVALUEMESSAGE_M_H

