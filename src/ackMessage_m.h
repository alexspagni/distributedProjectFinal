//
// Generated file, do not edit! Created by opp_msgtool 6.0 from ackMessage.msg.
//

#ifndef __ACKMESSAGE_M_H
#define __ACKMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class ackMessage;
/**
 * Class generated from <tt>ackMessage.msg:17</tt> by opp_msgtool.
 * <pre>
 * message ackMessage
 * {
 *     bool performed;
 *     int nodeNumber;
 *     string partition;
 * }
 * </pre>
 */
class ackMessage : public ::omnetpp::cMessage
{
  protected:
    bool performed = false;
    int nodeNumber = 0;
    omnetpp::opp_string partition;

  private:
    void copy(const ackMessage& other);

  protected:
    bool operator==(const ackMessage&) = delete;

  public:
    ackMessage(const char *name=nullptr, short kind=0);
    ackMessage(const ackMessage& other);
    virtual ~ackMessage();
    ackMessage& operator=(const ackMessage& other);
    virtual ackMessage *dup() const override {return new ackMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual bool getPerformed() const;
    virtual void setPerformed(bool performed);

    virtual int getNodeNumber() const;
    virtual void setNodeNumber(int nodeNumber);

    virtual const char * getPartition() const;
    virtual void setPartition(const char * partition);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ackMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ackMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline ackMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<ackMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __ACKMESSAGE_M_H

